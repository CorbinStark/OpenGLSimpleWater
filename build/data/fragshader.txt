#version 130
out vec4 outColor;

in vec2 pass_uv;
in vec3 pass_normal;
in vec3 fragPos;

uniform sampler2D tex;
uniform float textureIsBound;

uniform vec4 ambientColor;
uniform vec4 diffuseColor;
uniform vec4 specularColor;

uniform vec3 lightColor = vec3(1, 1, 1);
uniform vec3 lightPos = vec3(20000, 40000, 20000);
uniform vec3 objectColor = vec3(1.0f, 0.5f, 0.31f);
uniform vec3 viewPos;

void main() {
	// ambient
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColor;

    // diffuse
    vec3 norm = normalize(pass_normal);
    vec3 lightDir = normalize(lightPos - fragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;

	// specular
	float specularStrength = 0.5;
	vec3 viewDir = normalize(viewPos - fragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = specularStrength * spec * lightColor;

    vec3 result = diffuse * diffuseColor.xyz;
    outColor = vec4(result, 1.0);
    outColor = vec4(0.5, 0.5, 0.5, 0.5);
}
